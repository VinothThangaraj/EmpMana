@model EmpManagement.Models.ResetPasswordModel
@{
    ViewBag.Title = "Reset Password";
    Layout = "~/Views/Shared/_PublicLayout.cshtml";
}

<div>
    <div class="vm-login-form">
        <div class="text-center m-t-xl">
            <img src="~/Images/NewLogo.png" class="vm-logo-ht">
        </div>
        <h3 class="text-center vm-sub-text">Reset Password</h3>
        <p>

        </p>

        @if (!string.IsNullOrWhiteSpace(ViewBag.ErrorMessage))
        {
            <div id="reset-error" class="resetMessageDiv">
                <div style="color:#B51924 !important;" class="resetSuccessMessage"> @ViewBag.ErrorMessage </div>
            </div>
        }
        else
        {
            <div id="reset-success" class="resetMessageDiv vm-display-none">
                <div class="resetSuccessMessage"> </div>
            </div>
            <div id="reset-error" class="resetMessageDiv vm-display-none">
                <div class="resetErrorMessage"> </div>
            </div>

            <div id="resetPasswordContainer">
                @using (Html.BeginForm(null, null, FormMethod.Post, new { @class = "m-t-xl", @id = "ResetPassword" }))
            {
            @Html.ValidationSummary(false, "", new { @class = "text-danger" })

            <div class="form-group">
                <label for="" class="light inputRequired">New Password</label>
                @Html.PasswordFor(m => m.NewPassword, new { @id = "txtPassword", @class = "form-control vm-login-input", @required = "required" })
            </div>
            <div class="form-group">
                <label for="" class="light inputRequired">Confirm New Password</label>
                @Html.PasswordFor(m => m.ConfirmPassword, new { @id = "txtConfirmPassword", @class = "form-control vm-login-input", @required = "required" })
            </div>
            <div class="form-group">
                <button id="submitBtn" type="submit" class="btn vm-btn-green block full-width">Submit</button>
                <button id="submitLoader" class="btn vm-btn-green block full-width vm-display-none" disabled>
                    <img src="~/Images/ajax-loader-white.gif" class="width-25"> Checking...
                </button>
            </div>
            @Html.HiddenFor(m => m.UserId)
            @Html.HiddenFor(m => m.Code)
            }
            </div>
        }
    </div>
</div>

<script>

    function IsPasswordValid(password) {
        var pattern = new RegExp(/^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?])[0-9a-zA-Z!@@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]{6,30}$/);
        return pattern.test(password);
    }

    $("form#ResetPassword").off("submit").on("submit", function (e) {
        e.preventDefault();
        $("#reset-success").hide();
        $("#reset-error").hide();
        $("#submitBtn").hide();
        $("#submitLoader").show();
        var password = $("#txtPassword").val();
        var confirmPassword = $("#txtConfirmPassword").val();

        if (!password || !confirmPassword) {
            $('.resetErrorMessage').text('All fields are mandatory');
            clearOnError();
            clearFields();
            return false;
        }
        else if (password != confirmPassword) {
            $('.resetErrorMessage').text('Passwords do not match');
            clearOnError();
            clearFields();
            return false;
        }
        else {
            if (!IsPasswordValid(password)) {
                $('.resetErrorMessage').text('Password should contain minimum 6 characters with atleast one number, one lowercase, one uppercase, one special character');
                clearOnError();
                clearFields();
                return false;
            }
            else {
                try {
                    var form = $("form#ResetPassword");
                    var data = JSON.stringify($(form).serializeObject());

                    $.ajax(
                        {
                            url: "../api/Account/ResetPFMPassword",
                            method: "POST",
                            data: data,
                            contentType: "application/json",
                            processData: false,
                            success: function (response) {
                                $("#resetPasswordContainer").hide();
                                $('.resetSuccessMessage').text(response);
                                $("#reset-success").show();
                                $("#reset-error").hide();                                
                            },
                            error: function (jqXhr, textStatus, errorThrown) {
                                switch (jqXhr.status) {
                                    case 400:
                                        var errorJson = JSON.parse(jqXhr.responseText);
                                        $('.resetErrorMessage').text(errorJson.ModelState.error[0]);
                                        break;
                                    default:
                                        $('.resetErrorMessage').text(errorThrown);
                                }
                                clearOnError();
                            },
                            complete: function () {
                                $("#txtPassword").val('');
                                $("#txtConfirmPassword").val('');
                                clearFields();
                            }

                        });
                }
                catch (ex) {
                    $('.resetErrorMessage').text(ex.message);
                    clearOnError();
                    clearFields();
                }
            }
        }
    });

    function clearFields() {
        $("#txtPassword").val('');
        $("#txtConfirmPassword").val('');
        $("#submitBtn").show();
        $("#submitLoader").hide();
    }

    function clearOnError() {
        $("#reset-success").hide();
        $("#reset-error").show();
    }

    $.fn.serializeObject = function () {
        var o = {};
        var a = this.serializeArray();
        $.each(a, function () {
            if (o[this.name] !== undefined) {
                if (!o[this.name].push) {
                    o[this.name] = [o[this.name]];
                }
                o[this.name].push(this.value || '');
            } else {
                o[this.name] = this.value || '';
            }
        });
        return o;
    };
</script>

